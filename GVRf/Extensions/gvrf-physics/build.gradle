import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

repositories {
    flatDir {
        dirs '../../gearvrf-libs/'
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion '23.0.3'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 19

        ndk {
            moduleName "gvrf-physics"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    sourceSets.main {
        java.srcDirs = ['src/main/java']
        jni.srcDirs = [] // no auto generation of Android.mk
        jniLibs.srcDir 'src/main/libs/' // pre-compiled libraries
    }

    task buildNative(type: Exec) {
        def ndkbuild = ""
        if (rootProject.hasProperty("ANDROID_NDK_HOME")) {
            ndkbuild = rootProject.property("ANDROID_NDK_HOME")
            ndkbuild += '/'
        }
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            ndkbuild += 'ndk-build.cmd'
        } else {
            ndkbuild += 'ndk-build'
        }

        if (rootProject.hasProperty("ARM64")) {
            environment 'ARM64', "true"
        }
        commandLine ndkbuild, '-C', file('src/main').absolutePath, '-j', Runtime.runtime.availableProcessors()//, 'NDK_DEBUG=1'
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }

    task cleanNative(type: Exec) {
        def ndkbuild = ""
        if (rootProject.hasProperty("ANDROID_NDK_HOME")) {
            ndkbuild = rootProject.property("ANDROID_NDK_HOME")
            ndkbuild += '/'
        }
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            ndkbuild += 'ndk-build.cmd'
        } else {
            ndkbuild += 'ndk-build'
        }

        if (rootProject.hasProperty("ARM64")) {
            environment 'ARM64', "true"
        }
        commandLine ndkbuild, '-C', file('src/main').absolutePath, '-j', Runtime.runtime.availableProcessors(), 'clean'
    }
    clean.dependsOn 'cleanNative'
}

dependencies {
    compile(name: 'framework-debug', ext: 'aar')
}

clean {}.doLast {
    def gearvrfLibs = project.rootDir.absolutePath + "/../gearvrf-libs"
    if (file(gearvrfLibs).exists()) {
        project.delete(gearvrfLibs + '/' + project.name + '-release.aar')
        project.delete(gearvrfLibs + '/' + project.name + '-debug.aar')
    }
}

task copyJarToBin(type: Copy) {
    outputs.upToDateWhen { false }
    from tasks.matching { it.name.startsWith('bundle') }
    into project.rootDir.absolutePath + "/../gearvrf-libs"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'bundleDebug') {
        task.finalizedBy(copyJarToBin)
    } else if (task.name == 'bundleRelease') {
        task.finalizedBy(copyJarToBin)
    }
}