/* Copyright 2015 Samsung Electronics Co., LTD
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gearvrf;

import java.util.HashMap;
import java.util.Map;
import java.lang.reflect.*;

import org.gearvrf.GVRShaderTemplate;
import org.gearvrf.GVRContext;
import org.gearvrf.utility.Log;

/**
 * Manages custom shaders, for rendering scene objects.
 * 
 * Get the singleton from {@link GVRContext#getMaterialShaderManager()}.
 */
    public class GVRMaterialShaderManager extends
        GVRBaseShaderManager<GVRMaterialMap, GVRCustomMaterialShaderId>
        implements GVRShaderManagers<GVRMaterialMap, GVRCustomMaterialShaderId> {

    private final Map<GVRCustomMaterialShaderId, GVRMaterialMap> materialMaps = new HashMap<GVRCustomMaterialShaderId, GVRMaterialMap>();

    GVRMaterialShaderManager(GVRContext gvrContext) {
        super(gvrContext, NativeShaderManager.ctor());
    }

    @Override
    public GVRCustomMaterialShaderId addShader(String vertexShader,
            String fragmentShader) {
        final int shaderId = NativeShaderManager.addCustomShader(getNative(),
                vertexShader, fragmentShader);
        GVRCustomMaterialShaderId result = new GVRCustomMaterialShaderId(
                shaderId);
        materialMaps.put(result, retrieveShaderMap(result));
        return result;
    }
    
    /**
     * Retrieves the shader template of the specified class.
     * 
     * A shader template is capable of generating multiple variants
     * from a single shader source. The exact vertex and fragment
     * shaders are generated by GearVRF based on the lights
     * being used and the material attributes.
     * 
     * Only one template of a given class is necessary because
     * shaders are global. The shader manager controls instantiation
     * of the shader instances but you may subclass GVRShaderTemplate
     * to create your own shader templates.
     * 
     * @param templateClass class (subclass of GVRShaderTemplate)
     * @return instance of GVRShaderTemplate or null on error
     * {@link GVRShaderTemplate}
     */
    public GVRShaderTemplate retrieveShaderTemplate(Class<? extends GVRShaderTemplate> templateClass)
        throws IllegalArgumentException, UnsupportedOperationException {
        GVRShaderTemplate template = mShaderTemplates.get(templateClass);
        if (template != null) {
            return template;
        }
        try {
            Constructor<? extends GVRShaderTemplate> constructor = templateClass.getConstructor(GVRContext.class);
            template = (GVRShaderTemplate) constructor.newInstance(getGVRContext());
            mShaderTemplates.put(templateClass, template);
        }
        catch (NoSuchMethodException mex) {
            throw new UnsupportedOperationException("shader template of class "
                    + templateClass.getSimpleName()
                    + " does not have a constructor which takes GVRContext "
                    + mex.getMessage());
        }
        catch (InstantiationException iex) {
            throw new UnsupportedOperationException("error creating shader template of class "
                    + templateClass.getSimpleName()
                    + iex.getMessage());
        }
        catch (IllegalAccessException aex) {
            throw new UnsupportedOperationException("error creating shader template of class "
                    + templateClass.getSimpleName()
                    + aex.getMessage());
        }
        catch (InvocationTargetException tex)
        {
            throw new UnsupportedOperationException("error creating shader template of class "
                    + templateClass.getSimpleName()
                    + tex.getMessage());
        }
        // TODO: generate event to force rebinding of shaders
        return template;
    }
    
    @Override
    public GVRMaterialMap getShaderMap(GVRCustomMaterialShaderId id) {
        return materialMaps.get(id);
    }

    @SuppressWarnings("resource")
    private GVRMaterialMap retrieveShaderMap(GVRCustomMaterialShaderId id) {
        long ptr = NativeShaderManager.getCustomShader(getNative(), id.ID);
        return ptr == 0 ? null : new GVRMaterialMap(getGVRContext(), ptr);
    }
    
    /**
     * Maps the shader template class to the instance of the template.
     * Only one shader template of each class is necessary since
     * shaders are global.
     */
     protected Map<Class<? extends GVRShaderTemplate>, GVRShaderTemplate> mShaderTemplates = new HashMap<Class<? extends GVRShaderTemplate>, GVRShaderTemplate>();
}

class NativeShaderManager {
    static native long ctor();

    static native int addCustomShader(long shaderManager, String vertexShader,
            String fragmentShader);

    static native long getCustomShader(long shaderManager, int id);
}
