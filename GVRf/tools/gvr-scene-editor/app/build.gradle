/*
 * Copyright 2016 Samsung Electronics Co., LTD
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: XmlValidator

System.setProperty("appName", "gvr-scene-editor")

repositories {
    jcenter()
    flatDir {
        dirs '../../../gearvrf-libs'
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion "25.0.0"

    buildTypes {
        debug {
            resValue 'string', 'app_name', System.getProperty("appName")
        }
        release {
            resValue 'string', 'app_name', System.getProperty("appName")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 19
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    System.getProperty("appName") + ".apk")
        }
    }

    // ignore the x86 and arm-v8 files from the google vr libraries
    packagingOptions {
        exclude 'lib/x86/libgvr.so'
        exclude 'lib/arm64-v8a/libgvr.so'
    }

    defaultConfig {
        applicationId "org.gearvrf.io.sceneeditor"
    }

    lintOptions {
        checkReleaseBuilds false
    }
    defaultConfig {
        multiDexEnabled true
    }
}

task copyOculusSignature(type: Copy) {
    if (rootProject.hasProperty("OCULUS_SIGS_DIRECTORY")) {
        copy {
            from rootProject.property("OCULUS_SIGS_DIRECTORY")
            into 'src/main/assets'
            include 'oculussig_*'
        }
    }
}

preBuild {}.dependsOn copyOculusSignature

project.ext.jomlVersion = "1.9.1-SNAPSHOT"

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile(name:'3DCursorLibrary-debug', ext:'aar')
    compile(name:'sceneserializer-debug', ext:'aar')
    compile(name: 'framework-debug', ext: 'aar')
    compile 'com.google.vr:sdk-base:1.10.0'
    compile "org.joml:joml-android:${jomlVersion}"

    if (rootProject.hasProperty("only_daydream")) {
        compile(name: 'backend_daydream-debug', ext: 'aar')
        compile 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-7'
    } else {
        if (rootProject.hasProperty("no_oculus")) {
            compile(name: 'backend-debug', ext: 'aar')
        } else { //default oculus+daydream
            compile(name: 'backend_oculus-debug', ext: 'aar')
            compile(name: 'backend_daydream-debug', ext: 'aar')
            compile 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-7'
        }
    }
}

//TODO export plugin to jar
import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory

class XmlValidator implements Plugin<Project> {
    void apply(Project project) {
        project.task('validateXml') << {
            println 'Validating settings.xml file'
            File xml = project.file('src/main/assets/settings.xml');
            File xsd = project.file('src/main/res/xml/settings_schema.xsd');

            def factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            def schema = factory.newSchema(xsd);
            def validator = schema.newValidator();
            validator.validate(new StreamSource(xml));
        }
    }
}

preBuild.dependsOn validateXml
